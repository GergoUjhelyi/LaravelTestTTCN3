module HTTP_Tests {
import from HTTP_Test_Types all;
import from HTTPmsg_PortType all;
import from HTTPmsg_Types all;
import from UsageStat_Type all;
import from Utility_Functions all;


//Default server parameters
modulepar charstring HttpServerHost := "localhost";
modulepar integer HttpServerPort := 8000;
modulepar boolean HttpServerUseSSL := false;

type component HTTP_client {
  port HTTPmsg_PT client_port;
};

/***************************************
** @desc Test the main page which is a generated HTML page **
** @verdict pass if the server is running and have a main page **
**************************************/ 
testcase tc_laravel_index_test() runs on HTTP_client {
  var Connect v_connection_message := { hostname := HttpServerHost, portnumber:= HttpServerPort, use_ssl:= HttpServerUseSSL };
  var HTTPMessage v_HTTP_response;

  //Map to server
  map(self:client_port, system:client_port);

  //Send HTTP connection
  client_port.send(v_connection_message);

  timer T_timer := 4.0;

  //Send HTTP request
  client_port.send(c_http_get_main_page);

  T_timer.start;

  alt {
    //Receive a HTTP message
    [] client_port.receive(HTTPMessage:?) -> value v_HTTP_response {
      if (match(v_HTTP_response, recv_ok_response)) {
        setverdict(pass, "Received HTTP OK/200 response! Received: ", v_HTTP_response);
      } else {
        setverdict(fail, "Received wrong response! Received: ", v_HTTP_response);
      }
      client_port.send(c_close_message);
      T_timer.stop;
    }
    //Receive a Half_Close response
    [] client_port.receive(any_half_close) {
      client_port.send(c_close_message);
      T_timer.stop;
      setverdict(fail);
    }
    //Receive something else
    [] client_port.receive {
      client_port.send(c_close_message);
      T_timer.stop;
      setverdict(fail);
    }
    //Receive nothing until the end of the timer T_timer
    [] T_timer.timeout {
      setverdict(fail);
    }
  };
  //Unmap from server
  unmap(self:client_port, system:client_port);
}

/***************************************
** @desc Test the Usage_Stat instances in the servers' database **
** @verdict pass if the servers' DB contains only valid usage stats **
**************************************/
testcase tc_laravel_get_all_json() runs on HTTP_client {
  var Connect v_connection_message := { hostname := HttpServerHost, portnumber:= HttpServerPort, use_ssl:= HttpServerUseSSL };
  var HTTPMessage v_HTTP_response;
  var octetstring v_body;
  var charstring vl_char_body;

  //Map to server
  map(self:client_port, system:client_port);

  //Send HTTP connection
  client_port.send(v_connection_message);

  timer T_timer := 4.0;

  //Send HTTP request
  client_port.send(c_http_get_all_usage_stats);

  if (T_timer.running) {
    T_timer.stop;
  }
  T_timer.start;

  alt {
    //Receive a HTTP response
    [] client_port.receive(HTTPMessage:?) -> value v_HTTP_response {
      if (ischosen(v_HTTP_response.response_binary)) {
        v_body:=v_HTTP_response.response_binary.body;
        log("encodingtype", get_stringencoding(v_body));
      } else if (ischosen(v_HTTP_response.response)) {
        vl_char_body:= v_HTTP_response.response.body;

        var Usage_Stat_Response_Array v_JSON_PDU := ef_dec_usage_arr_JSON(char2oct(vl_char_body));
        if (lengthof(v_JSON_PDU) <= 0) {
          setverdict(fail);
        }
        for(var integer i:=0; i < lengthof(v_JSON_PDU); i:=i+1) {
          if (match(v_JSON_PDU[i], usage_state_resp_template)) {
            setverdict(pass);
          } else {
            setverdict(fail);
          }
        }
      }
    }
    //Receive a Half_Close response
    [] client_port.receive(any_half_close) {
      client_port.send(c_close_message);
      T_timer.stop;
      setverdict(fail);
    }
    //Receive something else
    [] client_port.receive {
      client_port.send(c_close_message);
      T_timer.stop;
      setverdict(fail);
    }
    [] T_timer.timeout {
      setverdict(fail);
    }
  };
  //Unmap from server
  unmap(self:client_port, system:client_port);
}

/***************************************
** @desc Test the first Usage_Stat instances in the servers' database **
** @verdict pass if the first insatnce exists and valid **
**************************************/
testcase tc_laravel_get_first_element_by_id_json() runs on HTTP_client {
  var Connect v_connection_message := { hostname := HttpServerHost, portnumber:= HttpServerPort, use_ssl:= HttpServerUseSSL };
  var HTTPMessage v_http_get_first_instance := { request:= { method:= "GET", uri:= "/usage_stats/1", version_major:= 1, version_minor:= 1 , header:= c_header_accept_html, body:= ""}};
  var HTTPMessage v_HTTP_response;
  var octetstring v_body;
  var charstring vl_char_body;

  //Map to server
  map(self:client_port, system:client_port);

  //Send HTTP connection
  client_port.send(v_connection_message);

  timer T_timer := 4.0;

  //Send HTTP request
  client_port.send(v_http_get_first_instance);

  if (T_timer.running) {
    T_timer.stop;
  }
  T_timer.start;

  alt {
    //Receive a HTTP response
    [] client_port.receive(HTTPMessage:?) -> value v_HTTP_response {
      if (ischosen(v_HTTP_response.response_binary)) {
        v_body:=v_HTTP_response.response_binary.body;
        log("encodingtype", get_stringencoding(v_body));
      } else if (ischosen(v_HTTP_response.response)) {
        vl_char_body:= v_HTTP_response.response.body;
        var Usage_Stat_response v_JSON_PDU := ef_dec_usage_JSON(char2oct(vl_char_body));
        if (match(v_JSON_PDU, usage_state_resp_param_template(1))) {
          setverdict(pass);
        } else {
          setverdict(fail);
        }
      }
    }
    //Receive a Half_Close response
    [] client_port.receive(any_half_close) {
      client_port.send(c_close_message);
      T_timer.stop;
      setverdict(fail);
    }
    //Receive something else
    [] client_port.receive {
      client_port.send(c_close_message);
      T_timer.stop;
      setverdict(fail);
    }
    [] T_timer.timeout {
      setverdict(fail);
    }
  };
  //Unmap from server
  unmap(self:client_port, system:client_port);
}

/***************************************
** @desc Test the a non-exists Usage_Stat instances in the servers' database **
** @verdict pass if the server respond a Not Found response **
**************************************/
testcase tc_laravel_get_unknown_element_by_id_json() runs on HTTP_client {
  var Connect v_connection_message := { hostname := HttpServerHost, portnumber:= HttpServerPort, use_ssl:= HttpServerUseSSL };
  var HTTPMessage v_http_get_unknown_instance := { request:= { method:= "GET", uri:= "/usage_stats/10000", version_major:= 1, version_minor:= 1 , header:= c_header_accept_html, body:= ""}};
  var HTTPMessage v_HTTP_response;
  var octetstring v_body;
  var charstring vl_char_body;

  //Map to server
  map(self:client_port, system:client_port);

  //Send HTTP connection
  client_port.send(v_connection_message);

  timer T_timer := 4.0;

  //Send HTTP request
  client_port.send(v_http_get_unknown_instance);

  if (T_timer.running) {
    T_timer.stop;
  }
  T_timer.start;

  alt {
    //Receive a HTTP message
    [] client_port.receive(HTTPMessage:?) -> value v_HTTP_response {
      if (match(v_HTTP_response, recv_page_not_found_response)) {
        setverdict(pass, "Received HTTP NOT FOUND/404 response! Received: ", v_HTTP_response);
      } else {
        setverdict(fail, "Received wrong response! Received: ", v_HTTP_response);
      }
      client_port.send(c_close_message);
      T_timer.stop;
    }
    //Receive a Half_Close response
    [] client_port.receive(any_half_close) {
      client_port.send(c_close_message);
      T_timer.stop;
      setverdict(fail);
    }
    //Receive something else
    [] client_port.receive {
      client_port.send(c_close_message);
      T_timer.stop;
      setverdict(fail);
    }
    //Receive nothing until the end of the timer T_timer
    [] T_timer.timeout {
      setverdict(fail);
    }
  };
  //Unmap from server
  unmap(self:client_port, system:client_port);
}

/***************************************
** @desc Send a HTTP Post message with a new element in message body and check the response **
** @verdict pass if the server respond a 200OK response **
**************************************/
testcase tc_laravel_post_element() runs on HTTP_client {
  var Connect v_connection_message := { hostname := HttpServerHost, portnumber:= HttpServerPort, use_ssl:= HttpServerUseSSL };
  var HTTPMessage v_HTTP_response;
  var HeaderLines v_post_headers := {
    { header_name:= "Connection", header_value:= "close" },
    { header_name:= "Content-Type", header_value:= "application/json" },
    { header_name:= "Content-Length", header_value:= "332" },
    { header_name:= "X-CSRF-TOKEN", header_value:= ef_getCSRFToken(HttpServerHost, HttpServerPort) }
  };
  var HTTPMessage v_post_request := { request := { method := "POST", uri:= "/usage_stats", version_major:= 1, version_minor:= 1, header:= v_post_headers, body:= ef_getJSONFormatPOSTRequestBody() } };

  //Map to server
  map(self:client_port, system:client_port);

  //Send HTTP connection
  client_port.send(v_connection_message);

  timer T_timer := 4.0;

  //Send HTTP request
  client_port.send( v_post_request );

  if (T_timer.running) {
    T_timer.stop;
  }
  T_timer.start;

  alt {
    //Receive a HTTP message
    [] client_port.receive(HTTPMessage:?) -> value v_HTTP_response {
      if (match(v_HTTP_response, recv_ok_response_from_post)) {
        setverdict(pass, "Received HTTP OK/200 response! Received: ", v_HTTP_response);
      } else {
        setverdict(fail, "Received wrong response! Received: ", v_HTTP_response);
      }
      client_port.send(c_close_message);
      T_timer.stop;
    }
    //Receive a Half_Close response
    [] client_port.receive(any_half_close) {
      client_port.send(c_close_message);
      T_timer.stop;
      setverdict(fail);
    }
    //Receive something else
    [] client_port.receive {
      client_port.send(c_close_message);
      T_timer.stop;
      setverdict(fail);
    }
    //Receive nothing until the end of the timer T_timer
    [] T_timer.timeout {
      setverdict(fail);
    }
  };
  //Unmap from server
  unmap(self:client_port, system:client_port);
}

testcase tc_laravel_delete_last_element() runs on HTTP_client {
  var Connect v_connection_message := { hostname := HttpServerHost, portnumber:= HttpServerPort, use_ssl:= HttpServerUseSSL };
  var HTTPMessage v_HTTP_response;
  var HeaderLines v_delete_headers := {
    { header_name:= "Connection", header_value:= "close" },
    { header_name:= "X-CSRF-TOKEN", header_value:= ef_getCSRFToken(HttpServerHost, HttpServerPort) }
  };
  var HTTPMessage v_delete_request := { request := { method := "DELETE", uri:= "/usage_stats/" & ef_getLastIDinDB() , version_major:= 1, version_minor:= 1, header:= v_delete_headers, body:= "" } };

  //Map to server
  map(self:client_port, system:client_port);

  //Send HTTP connection
  client_port.send(v_connection_message);

  timer T_timer := 4.0;

  //Send HTTP request
  client_port.send( v_delete_request );

  if (T_timer.running) {
    T_timer.stop;
  }
  T_timer.start;

  alt {
    //Receive a HTTP message
    [] client_port.receive(HTTPMessage:?) -> value v_HTTP_response {
      if (match(v_HTTP_response, recv_ok_response_from_delete)) {
        setverdict(pass, "Received HTTP OK/200 response! Received: ", v_HTTP_response);
      } else {
        setverdict(fail, "Received wrong response! Received: ", v_HTTP_response);
      }
      client_port.send(c_close_message);
      T_timer.stop;
    }
    //Receive a Half_Close response
    [] client_port.receive(any_half_close) {
      client_port.send(c_close_message);
      T_timer.stop;
      setverdict(fail);
    }
    //Receive something else
    [] client_port.receive {
      client_port.send(c_close_message);
      T_timer.stop;
      setverdict(fail);
    }
    //Receive nothing until the end of the timer T_timer
    [] T_timer.timeout {
      setverdict(fail);
    }
  };
  //Unmap from server
  unmap(self:client_port, system:client_port);
}
}
